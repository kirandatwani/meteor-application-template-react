{"version":3,"sources":["meteor://ðŸ’»app/packages/barbatus:typescript-compiler/logger.js","meteor://ðŸ’»app/packages/barbatus:typescript-compiler/file-utils.js","meteor://ðŸ’»app/packages/barbatus:typescript-compiler/typescript-compiler.js","meteor://ðŸ’»app/packages/barbatus:typescript-compiler/typescript.js","meteor://ðŸ’»app/packages/barbatus:typescript-compiler/utils.js"],"names":["util","Npm","require","Logger_","constructor","llevel","process","env","TYPESCRIPT_LOG","newProfiler","name","profiler","Profiler","isProfile","start","isDebug","isAssert","log","msg","args","console","apply","concat","debug","assert","Logger","time","format","_started","end","timeEnd","module","export","isBare","isMainConfig","isConfig","isServerConfig","isDeclaration","isWeb","getExtendedPath","getES6ModuleName","WarnMixin","extendFiles","colors","inputFile","fileOptions","getFileOptions","bare","filePath","getPathInPackage","test","TypeScript","isDeclarationFile","getBasename","arch","getArch","packageName","getPackageName","replace","inputFilePath","extended","removeTsExt","warn","error","sourcePath","line","column","message","logError","red","inputFiles","fileMixin","forEach","_","defaults","module1","link","v","getShallowHash","async","path","fs","Future","TSBuild","validateTsConfig","getExcludeRegExp","createHash","defExclude","RegExp","exlWebRegExp","exlMainRegExp","COMPILER_REGEXP","TS_REGEXP","TypeScriptCompiler","extraOptions","maxParallelism","validateExtraOptions","serverOptions","tsconfig","getDefaultOptions","cfgHash","diagHash","Set","archSet","getFilesToProcess","pexclude","_filterByDefault","_processConfig","_filterByConfig","length","_filterByArch","getBuildOptions","compilerOptions","Object","assign","typings","useCache","processFilesForTarget","getDepsContent","options","pcompile","filePaths","map","file","pbuild","defaultGet","_getContentGetter","getContent","tsBuild","pfiles","future","compileFiles","filter","throwSyntax","results","Map","eachLimit","done","co","pemit","result","emit","set","_processDiagnostics","diagnostics","resolver","wait","_addJavaScript","filesMap","index","get","undefined","filePathNoRootSlash","getContentsAsString","tsResult","forceBare","source","inputPath","outputPath","toBeAdded","data","code","hash","sourceMap","addJavaScript","tsOptions","reduce","diagnostic","cb","dob","add","shown","key","keys","has","syntacticErrors","semanticErrors","_getFileModuleName","tsFiles","getSourceHash","_parseConfig","target","lib","cfgContent","JSON","parse","files","err","Error","exclude","regExp","resultFiles","check","String","filterRegExp","meteorTS","validateOptions","validateAndConvertOptions","compile","setCacheDir","cacheDir","ob","sort","update","digest"],"mappings":"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","file":"/packages/barbatus_typescript-compiler.js","sourcesContent":["const util = Npm.require('util');\n\nclass Logger_ {\n  constructor() {\n    this.llevel = process.env.TYPESCRIPT_LOG;\n  }\n\n  newProfiler(name) {\n    let profiler = new Profiler(name);\n    if (this.isProfile) profiler.start();\n    return profiler;\n  }\n\n  get isDebug() {\n    return this.llevel >= 2;\n  }\n\n  get isProfile() {\n    return this.llevel >= 3;\n  }\n\n  get isAssert() {\n    return this.llevel >= 4;\n  }\n\n  log(msg, ...args) {\n    if (this.llevel >= 1) {\n      console.log.apply(null, [msg].concat(args));\n    }\n  }\n\n  debug(msg, ...args) {\n    if (this.isDebug) {\n      this.log.apply(this, msg, args);\n    }\n  }\n\n  assert(msg, ...args) {\n    if (this.isAssert) {\n      this.log.apply(this, msg, args);\n    }\n  }\n};\n\nLogger = new Logger_();\n\nclass Profiler {\n  constructor(name) {\n    this.name = name;\n  }\n\n  start() {\n    console.log('%s started', this.name);\n    console.time(util.format('%s time', this.name));\n    this._started = true;\n  }\n\n  end() {\n    if (this._started) {\n      console.timeEnd(util.format('%s time', this.name));\n    }\n  }\n}\n","const colors = Npm.require('colors');\n\nexport function isBare(inputFile) {\n  const fileOptions = inputFile.getFileOptions();\n  return fileOptions && fileOptions.bare;\n}\n\n// Gets root app tsconfig.\nexport function isMainConfig(inputFile) {\n  if (! isWeb(inputFile)) return false;\n\n  const filePath = inputFile.getPathInPackage();\n  return /^tsconfig\\.json$/.test(filePath);\n}\n\nexport function isConfig(inputFile) {\n  const filePath = inputFile.getPathInPackage();\n  return /tsconfig\\.json$/.test(filePath);\n}\n\n// Gets server tsconfig.\nexport function isServerConfig(inputFile) {\n  if (isWeb(inputFile)) return false;\n\n  const filePath = inputFile.getPathInPackage();\n  return /^server\\/tsconfig\\.json$/.test(filePath);\n}\n\n// Checks if it's .d.ts-file.\nexport function isDeclaration(inputFile) {\n  return TypeScript.isDeclarationFile(inputFile.getBasename());\n}\n\nexport function isWeb(inputFile) {\n  const arch = inputFile.getArch();\n  return /^web/.test(arch);\n}\n\n// Gets path with package prefix if any.\nexport function getExtendedPath(inputFile) {\n  let packageName = inputFile.getPackageName();\n  packageName = packageName ?\n    (packageName.replace(':', '_') + '/') : '';\n  const inputFilePath = inputFile.getPathInPackage();\n  return packageName + inputFilePath;\n}\n\nexport function getES6ModuleName(inputFile) {\n  const extended = getExtendedPath(inputFile);\n  return TypeScript.removeTsExt(extended);\n}\n\nexport const WarnMixin = {\n  warn(error) {\n    console.log(`${error.sourcePath} (${error.line}, ${error.column}): ${error.message}`);\n  },\n  logError(error) {\n    console.log(colors.red(\n      `${error.sourcePath} (${error.line}, ${error.column}): ${error.message}`));\n  }\n}\n\nexport function extendFiles(inputFiles, fileMixin) {\n  inputFiles.forEach(inputFile => _.defaults(inputFile, fileMixin));\n}\n","const async = Npm.require('async');\nconst path = Npm.require('path');\nconst fs = Npm.require('fs');\nconst Future = Npm.require('fibers/future');\n\nconst {\n  TSBuild,\n  validateTsConfig,\n  getExcludeRegExp,\n} = Npm.require('meteor-typescript');\n\nconst {createHash} = Npm.require('crypto');\n\nimport {\n  getExtendedPath,\n  isDeclaration,\n  isConfig,\n  isMainConfig,\n  isServerConfig,\n  isBare,\n  getES6ModuleName,\n  WarnMixin,\n  extendFiles,\n  isWeb,\n} from './file-utils';\n\nimport {\n  getShallowHash,\n} from './utils';\n\n// Default exclude paths.\nconst defExclude = new RegExp(\n  getExcludeRegExp(['node_modules/**']));\n\n// What to exclude when compiling for the server.\n// typings/main and typings/browser seem to be not used\n// at all but let keep them for just in case.\nconst exlWebRegExp = new RegExp(\n  getExcludeRegExp(['typings/main/**', 'typings/main.d.ts']));\n\n// What to exclude when compiling for the client.\nconst exlMainRegExp = new RegExp(\n  getExcludeRegExp(['typings/browser/**', 'typings/browser.d.ts']));\n\nconst COMPILER_REGEXP = /(\\.d.ts|\\.ts|\\.tsx|\\.tsconfig)$/;\n\nconst TS_REGEXP = /(\\.ts|\\.tsx)$/;\n\nTypeScriptCompiler = class TypeScriptCompiler {\n  constructor(extraOptions, maxParallelism) {\n    TypeScript.validateExtraOptions(extraOptions);\n\n    this.extraOptions = extraOptions;\n    this.maxParallelism = maxParallelism || 10;\n    this.serverOptions = null;\n    this.tsconfig = TypeScript.getDefaultOptions();\n    this.cfgHash = null;\n    this.diagHash = new Set;\n    this.archSet = new Set;\n  }\n\n  getFilesToProcess(inputFiles) {\n    const pexclude = Logger.newProfiler('exclude');\n\n    inputFiles = this._filterByDefault(inputFiles);\n\n    this._processConfig(inputFiles);\n\n    inputFiles = this._filterByConfig(inputFiles);\n\n    if (inputFiles.length) {\n      const arch = inputFiles[0].getArch();\n      inputFiles = this._filterByArch(inputFiles, arch);\n    }\n\n    pexclude.end();\n\n    return inputFiles;\n  }\n\n  getBuildOptions(inputFiles) {\n    this._processConfig(inputFiles);\n\n    const inputFile = inputFiles[0];\n    let { compilerOptions } = this.tsconfig;\n    // Make a copy.\n    compilerOptions = Object.assign({}, compilerOptions);\n    if (! isWeb(inputFile) && this.serverOptions) {\n      Object.assign(compilerOptions, this.serverOptions);\n    }\n\n    // Apply extra options.\n    if (this.extraOptions) {\n      Object.assign(compilerOptions, this.extraOptions);\n    }\n\n    const arch = inputFile.getArch();\n    const { typings, useCache } = this.tsconfig;\n    return { arch, compilerOptions, typings, useCache };\n  }\n\n  processFilesForTarget(inputFiles, getDepsContent) {\n    extendFiles(inputFiles, WarnMixin);\n\n    const options = this.getBuildOptions(inputFiles);\n    Logger.log('compiler options: %j', options.compilerOptions);\n\n    inputFiles = this.getFilesToProcess(inputFiles);\n\n    if (! inputFiles.length) return;\n\n    const pcompile = Logger.newProfiler('compilation');\n    const filePaths = inputFiles.map(file => getExtendedPath(file));\n    Logger.log('compile files: %s', filePaths);\n\n    const pbuild = Logger.newProfiler('tsBuild');\n    const defaultGet = this._getContentGetter(inputFiles);\n    const getContent = filePath =>\n      (getDepsContent && getDepsContent(filePath)) || defaultGet(filePath);\n    const tsBuild = new TSBuild(filePaths, getContent, options);\n    pbuild.end();\n\n    const pfiles = Logger.newProfiler('tsEmitFiles');\n    const future = new Future;\n    // Don't emit typings.\n    const compileFiles = inputFiles.filter(file => ! isDeclaration(file));\n    let throwSyntax = false;\n    const results = new Map();\n    async.eachLimit(compileFiles, this.maxParallelism, (file, done) => {\n      const co = options.compilerOptions;\n\n      const filePath = getExtendedPath(file);\n      const pemit = Logger.newProfiler('tsEmit');\n      const result = tsBuild.emit(filePath);\n      results.set(file, result);\n      pemit.end();\n\n      throwSyntax = throwSyntax | \n        this._processDiagnostics(file, result.diagnostics, co);\n\n      done();\n    }, future.resolver());\n\n    pfiles.end();\n\n    future.wait();\n\n    if (! throwSyntax) {\n      results.forEach((result, file) => {\n        const module = options.compilerOptions.module;\n        this._addJavaScript(file, result, module === 'none');\n      });\n    }\n\n    pcompile.end();\n  }\n\n  _getContentGetter(inputFiles) {\n    const filesMap = new Map;\n    inputFiles.forEach((inputFile, index) => {\n      filesMap.set(getExtendedPath(inputFile), index);\n    });\n\n    return filePath => {\n      let index = filesMap.get(filePath);\n      if (index === undefined) {\n        const filePathNoRootSlash = filePath.replace(/^\\//, '');\n        index = filesMap.get(filePathNoRootSlash);\n      }\n      return index !== undefined ?\n        inputFiles[index].getContentsAsString() : null;\n    };\n  }\n\n  _addJavaScript(inputFile, tsResult, forceBare) {\n    const source = inputFile.getContentsAsString();\n    const inputPath = inputFile.getPathInPackage();\n    const outputPath = TypeScript.removeTsExt(inputPath) + '.js';\n    const toBeAdded = {\n      sourcePath: inputPath,\n      path: outputPath,\n      data: tsResult.code,\n      hash: tsResult.hash,\n      sourceMap: tsResult.sourceMap,\n      bare: forceBare || isBare(inputFile)\n    };\n    inputFile.addJavaScript(toBeAdded);\n  }\n\n  _processDiagnostics(inputFile, diagnostics, tsOptions) {\n    // Remove duplicated warnings for shared files\n    // by saving hashes of already shown warnings.\n    const reduce = (diagnostic, cb) => {\n      let dob = {\n        message: diagnostic.message,\n        sourcePath: getExtendedPath(inputFile),\n        line: diagnostic.line,\n        column: diagnostic.column\n      };\n      const arch = inputFile.getArch();\n      // TODO: find out how to get list of architectures.\n      this.archSet.add(arch);\n\n      let shown = false;\n      for (const key of this.archSet.keys()) {\n        if (key !== arch) {\n          dob.arch = key;\n          const hash = getShallowHash(dob);\n          if (this.diagHash.has(hash)) {\n            shown = true; break;\n          }\n        }\n      }\n\n      if (! shown) {\n        dob.arch = arch;\n        const hash = getShallowHash(dob);\n        this.diagHash.add(hash);\n        cb(dob);\n      }\n    }\n\n    // Always throw syntax errors.\n    const throwSyntax = !! diagnostics.syntacticErrors.length;\n    diagnostics.syntacticErrors.forEach(diagnostic => {\n      reduce(diagnostic, dob => {\n        inputFile.error(dob);\n      });\n    });\n\n    const packageName = inputFile.getPackageName();\n    if (packageName) return throwSyntax;\n\n    // And log out other errors except package files.\n    if (tsOptions && tsOptions.diagnostics) {\n      diagnostics.semanticErrors.forEach(diagnostic => {\n        reduce(diagnostic, dob => inputFile.warn(dob));\n      });\n    }\n\n    return throwSyntax;\n  }\n\n  _getFileModuleName(inputFile, options) {\n    if (options.module === 'none') return null;\n\n    return getES6ModuleName(inputFile);\n  }\n\n  _processConfig(inputFiles) {\n    const tsFiles = inputFiles\n      .map(inputFile => inputFile.getPathInPackage())\n      .filter(filePath => TS_REGEXP.test(filePath));\n\n    for (const inputFile of inputFiles) {\n      // Parse root config.\n      if (isMainConfig(inputFile)) {\n        const source = inputFile.getContentsAsString();\n        const hash = inputFile.getSourceHash();\n        // If hashes differ, create new tsconfig. \n        if (hash !== this.cfgHash) {\n          this.tsconfig = this._parseConfig(source, tsFiles);\n          this.cfgHash = hash;\n        }\n        return;\n      }\n\n      // Parse server config.\n      // Take only target and lib values.\n      if (isServerConfig(inputFile)) {\n        const  source = inputFile.getContentsAsString();\n        const { compilerOptions } = this._parseConfig(source, tsFiles);\n        if (compilerOptions) {\n          const { target, lib } = compilerOptions;\n          this.serverOptions = { target, lib };\n        }\n        return;\n      }\n    }\n  }\n\n  _parseConfig(cfgContent, tsFiles) {\n    let tsconfig = null;\n\n    try {\n      tsconfig = JSON.parse(cfgContent);\n      // Define files since if it's not defined\n      // validation throws an exception.\n      const files = tsconfig.files || tsFiles;\n      tsconfig.files = files;\n\n      validateTsConfig(tsconfig);\n    } catch(err) {\n      throw new Error(`Format of the tsconfig is invalid: ${err}`);\n    }\n\n    const exclude = tsconfig.exclude || [];\n    try {\n      const regExp = getExcludeRegExp(exclude);\n      tsconfig.exclude = regExp && new RegExp(regExp);\n    } catch(err) {\n      throw new Error(`Format of an exclude path is invalid: ${err}`);\n    }\n\n    return tsconfig;\n  }\n\n  _filterByDefault(inputFiles) {\n    inputFiles = inputFiles.filter(inputFile => {\n      const path = inputFile.getPathInPackage();\n      return COMPILER_REGEXP.test(path) && ! defExclude.test('/' + path);\n    });\n    return inputFiles;\n  }\n\n  _filterByConfig(inputFiles) {\n    let resultFiles = inputFiles;\n    if (this.tsconfig.exclude) {\n      resultFiles = resultFiles.filter(inputFile => {\n        const path = inputFile.getPathInPackage();\n        // There seems to an issue with getRegularExpressionForWildcard:\n        // result regexp always starts with /.\n        return ! this.tsconfig.exclude.test('/' + path);\n      });\n    }\n    return resultFiles;\n  }\n\n  _filterByArch(inputFiles, arch) {\n    check(arch, String);\n\n    /**\n     * Include only typings that current arch needs,\n     * typings/main is for the server only and\n     * typings/browser - for the client.\n     */\n    const filterRegExp = /^web/.test(arch) ? exlWebRegExp : exlMainRegExp;\n    inputFiles = inputFiles.filter(inputFile => {\n      const path = inputFile.getPathInPackage();\n      return ! filterRegExp.test('/' + path);\n    });\n\n    return inputFiles;\n  }\n}\n","const meteorTS = Npm.require('meteor-typescript');\n\nTypeScript = {\n  validateOptions(options) {\n    if (! options) return;\n\n    meteorTS.validateAndConvertOptions(options);\n  },\n\n  // Extra options are the same compiler options\n  // but passed in the compiler constructor.\n  validateExtraOptions(options) {\n    if (! options) return;\n\n    meteorTS.validateAndConvertOptions({\n      compilerOptions: options\n    });\n  },\n\n  getDefaultOptions: meteorTS.getDefaultOptions,\n\n  compile(source, options) {\n    options = options || meteorTS.getDefaultOptions();\n    return meteorTS.compile(source, options);\n  },\n\n  setCacheDir(cacheDir) {\n    meteorTS.setCacheDir(cacheDir);\n  },\n\n  isDeclarationFile(filePath) {\n    return /^.*\\.d\\.ts$/.test(filePath);\n  },\n\n  removeTsExt(path) {\n    return path && path.replace(/(\\.tsx|\\.ts)$/g, '');\n  }\n};\n","const {createHash} = Npm.require('crypto');\n\nexport function getShallowHash(ob) {\n  const hash = createHash('sha1');\n  const keys = Object.keys(ob);\n  keys.sort();\n\n  keys.forEach(key => {\n    hash.update(key).update('' + ob[key]);\n  });\n\n  return hash.digest('hex');\n}\n"]}